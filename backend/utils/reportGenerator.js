const PDFDocument = require('pdfkit');

async function generatePDFReport(session) {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({
        size: 'A4',
        margins: { top: 50, left: 50, right: 50, bottom: 50 }
      });
      const chunks = [];
      
      doc.on('data', chunk => chunks.push(chunk));
      doc.on('end', () => resolve(Buffer.concat(chunks)));
      doc.on('error', reject);
      
      // Header
      doc.fontSize(24).text('Video Proctoring System', { align: 'center' });
      doc.fontSize(20).text('Proctoring Report', { align: 'center' });
      doc.moveDown();
      doc.fontSize(10).fillColor('#666').text(`Generated: ${new Date().toLocaleString()}`, { align: 'center' });
      doc.moveDown(2);
      
      // Candidate Info Section
      doc.fillColor('#000').fontSize(16).text('Candidate Information', { underline: true });
      doc.fontSize(12).moveDown(0.5);
      doc.text(`Name: ${session.candidateName}`);
      doc.text(`Session Date: ${new Date(session.startTime).toLocaleDateString()}`);
      doc.text(`Start Time: ${new Date(session.startTime).toLocaleTimeString()}`);
      doc.text(`End Time: ${session.endTime ? new Date(session.endTime).toLocaleTimeString() : 'Ongoing'}`);
      doc.text(`Duration: ${session.duration ? Math.floor(session.duration / 60) + ' minutes' : 'Ongoing'}`);
      doc.moveDown();
      
      // Integrity Score Section
      doc.fontSize(16).text('Integrity Assessment', { underline: true });
      doc.moveDown(0.5);
      
      const score = session.integrityScore || 100;
      const scoreColor = score >= 80 ? '#4CAF50' : score >= 60 ? '#ff9800' : '#f44336';
      
      doc.fontSize(36).fillColor(scoreColor).text(`${score}/100`, { align: 'center' });
      doc.fontSize(12).fillColor('#000');
      doc.text(`Focus Lost Deductions: -${(session.focusLostCount || 0) * 5} points`, { align: 'center' });
      doc.text(`Suspicious Events Deductions: -${(session.suspiciousEvents || 0) * 10} points`, { align: 'center' });
      doc.moveDown(2);
      
      // Summary Statistics
      doc.fontSize(16).text('Summary Statistics', { underline: true });
      doc.fontSize(12).moveDown(0.5);
      doc.text(`Total Events: ${session.events?.length || 0}`);
      doc.text(`Focus Lost Count: ${session.focusLostCount || 0}`);
      doc.text(`Suspicious Events: ${session.suspiciousEvents || 0}`);
      doc.moveDown();
      
      // Event Timeline
      doc.addPage();
      doc.fontSize(16).text('Event Timeline', { underline: true });
      doc.moveDown();
      
      if (session.events && session.events.length > 0) {
        session.events.forEach((event, index) => {
          if (doc.y > 700) {
            doc.addPage();
          }
          
          const eventColor = event.severity === 'high' ? '#f44336' : event.severity === 'medium' ? '#ff9800' : '#4CAF50';
          
          doc.fontSize(10).fillColor(eventColor);
          doc.text(`${index + 1}. ${new Date(event.timestamp).toLocaleTimeString()} - ${event.eventType.replace(/_/g, ' ').toUpperCase()}`);
          doc.fillColor('#000').fontSize(9);
          if (event.details) doc.text(`   Details: ${event.details}`);
          if (event.duration) doc.text(`   Duration: ${event.duration} seconds`);
          doc.text(`   Impact: -${event.eventType.includes('focus') || event.eventType.includes('looking') ? 5 : 10} points`);
          doc.moveDown(0.5);
        });
      } else {
        doc.text('No events recorded during this session.');
      }
      
      // Footer
      doc.fontSize(8).fillColor('#666');
      doc.text('This report is auto-generated by Video Proctoring System', 50, doc.page.height - 50, {
        align: 'center'
      });
      
      doc.end();
    } catch (error) {
      reject(error);
    }
  });
}

async function generateCSVReport(session) {
  try {
    // Generate CSV manually without external library
    let csv = 'timestamp,eventType,severity,duration,details,impact\n';
    
    if (session.events && session.events.length > 0) {
      session.events.forEach(event => {
        const timestamp = new Date(event.timestamp).toLocaleString().replace(/,/g, ' ');
        const eventType = event.eventType || '';
        const severity = event.severity || 'medium';
        const duration = event.duration || 0;
        const details = (event.details || '').replace(/,/g, ';');
        const impact = event.eventType && (event.eventType.includes('focus') || event.eventType.includes('looking')) ? -5 : -10;
        
        csv += `"${timestamp}","${eventType}","${severity}",${duration},"${details}",${impact}\n`;
      });
      
      // Add summary row
      csv += `"SUMMARY","Total Events: ${session.events.length}","Integrity Score: ${session.integrityScore}/100",${session.duration || 0},"Focus Lost: ${session.focusLostCount || 0}; Suspicious: ${session.suspiciousEvents || 0}",${-(session.focusLostCount || 0) * 5 - (session.suspiciousEvents || 0) * 10}\n`;
    }
    
    return csv;
  } catch (error) {
    console.error('CSV generation error:', error);
    throw error;
  }
}

module.exports = { generatePDFReport, generateCSVReport };